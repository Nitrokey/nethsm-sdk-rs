{{>partial_header}}

use crate::apis::ResponseContent;
use super::{Error, configuration};

{{#operations}}
{{#operation}}
{{#vendorExtensions.x-consumeMultipleMediaTypes}}
{{#hasConsumes}}
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum {{{operationIdCamelCase}}}Body {
    {{#consumes}}
    {{#lambda.titlecase}}{{#lambda.camelcase}}{{{mediaType}}}{{/lambda.camelcase}}{{/lambda.titlecase}}({{#mediaIsJson}}{{#allParams}}{{#isBodyParam}}{{^required}}Option<{{/required}}{{#required}}{{#isNullable}}Option<{{/isNullable}}{{/required}}{{^isUuid}}{{#isString}}{{#isArray}}Vec<{{/isArray}}String{{#isArray}}>{{/isArray}}{{/isString}}{{/isUuid}}{{#isUuid}}{{#isArray}}Vec<{{/isArray}}String{{#isArray}}>{{/isArray}}{{/isUuid}}{{^isString}}{{^isUuid}}{{^isPrimitiveType}}{{^isContainer}}crate::models::{{/isContainer}}{{/isPrimitiveType}}{{{dataType}}}{{/isUuid}}{{/isString}}{{^required}}>{{/required}}{{#required}}{{#isNullable}}>{{/isNullable}}{{/required}}{{/isBodyParam}}{{/allParams}}{{/mediaIsJson}}{{^mediaIsJson}}String{{/mediaIsJson}}),
    {{/consumes}}
}

impl {{{operationIdCamelCase}}}Body {
    pub fn content_type(&self) -> &'static str {
        match self {
            {{#consumes}}
            Self::{{#lambda.titlecase}}{{#lambda.camelcase}}{{{mediaType}}}{{/lambda.camelcase}}{{/lambda.titlecase}}(_) => "{{{mediaType}}}",
            {{/consumes}}
        }
    }
    pub fn is_json(&self) -> bool {
        match self {
            {{#consumes}}
            Self::{{#lambda.titlecase}}{{#lambda.camelcase}}{{{mediaType}}}{{/lambda.camelcase}}{{/lambda.titlecase}}(_) => {{#mediaIsJson}}true{{/mediaIsJson}}{{^mediaIsJson}}false{{/mediaIsJson}},
            {{/consumes}}
        }
    }
    pub fn get_string(&self) -> String {
        match self {
            {{#consumes}}
            Self::{{#lambda.titlecase}}{{#lambda.camelcase}}{{{mediaType}}}{{/lambda.camelcase}}{{/lambda.titlecase}}
            {{#mediaIsJson}}
            (_) => "".to_string(),
            {{/mediaIsJson}}
            {{^mediaIsJson}}
            (s) => s.clone(),
            {{/mediaIsJson}}
            {{/consumes}}
        }
    }
}

{{/hasConsumes}}
{{/vendorExtensions.x-consumeMultipleMediaTypes}}
{{#vendorExtensions.x-produceMultipleMediaTypes}}
{{#hasProduces}}
#[derive(Clone, Debug)]
pub enum {{{operationIdCamelCase}}}Accept {
    {{#produces}}
    {{#lambda.titlecase}}{{#lambda.camelcase}}{{{mediaType}}}{{/lambda.camelcase}}{{/lambda.titlecase}},
    {{/produces}}
}

impl {{{operationIdCamelCase}}}Accept {
    pub fn as_str(&self) -> &'static str {
        match self {
            {{#produces}}
            Self::{{#lambda.titlecase}}{{#lambda.camelcase}}{{{mediaType}}}{{/lambda.camelcase}}{{/lambda.titlecase}} => "{{{mediaType}}}",
            {{/produces}}
        }
    }

    pub fn is_json(&self) -> bool {
        match self {
            {{#produces}}
            Self::{{#lambda.titlecase}}{{#lambda.camelcase}}{{{mediaType}}}{{/lambda.camelcase}}{{/lambda.titlecase}} => {{#mediaIsJson}}true{{/mediaIsJson}}{{^mediaIsJson}}false{{/mediaIsJson}},
            {{/produces}}
        }
    }
}
{{/hasProduces}}
{{/vendorExtensions.x-produceMultipleMediaTypes}}
{{#vendorExtensions.x-group-parameters}}
{{#allParams}}
{{#-first}}
/// struct for passing parameters to the method [`{{operationId}}`]
#[derive(Clone, Debug)]
pub struct {{{operationIdCamelCase}}}Params {
{{/-first}}
    {{#description}}
    /// {{{.}}}
    {{/description}}
    pub {{{paramName}}}: {{^required}}Option<{{/required}}{{#required}}{{#isNullable}}Option<{{/isNullable}}{{/required}}{{^isUuid}}{{#isString}}{{#isArray}}Vec<{{/isArray}}String{{#isArray}}>{{/isArray}}{{/isString}}{{/isUuid}}{{#isUuid}}{{#isArray}}Vec<{{/isArray}}String{{#isArray}}>{{/isArray}}{{/isUuid}}{{^isString}}{{^isUuid}}{{^isPrimitiveType}}{{^isContainer}}{{#isBodyParam}}crate::models::{{/isBodyParam}}{{/isContainer}}{{/isPrimitiveType}}{{{dataType}}}{{/isUuid}}{{/isString}}{{^required}}>{{/required}}{{#required}}{{#isNullable}}>{{/isNullable}}{{/required}}{{^-last}},{{/-last}}
{{#-last}}
}

{{/-last}}
{{/allParams}}
{{/vendorExtensions.x-group-parameters}}
{{/operation}}
{{/operations}}

{{#operations}}
{{#operation}}
/// struct for typed errors of method [`{{operationId}}`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum {{{operationIdCamelCase}}}Error {
    {{#responses}}
    {{#is4xx}}
    Status{{code}}({{#isEnum}}{{{enumName}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}),
    {{/is4xx}}
    {{#is5xx}}
    Status{{code}}({{#isEnum}}{{{enumName}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}),
    {{/is5xx}}
    {{#isDefault}}
    DefaultResponse({{#isEnum}}{{{enumName}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}),
    {{/isDefault}}
    {{/responses}}
    UnknownValue(serde_json::Value),
}

impl {{{operationIdCamelCase}}}Error {
    fn new(status: u16, data: &[u8]) -> Result<Self, serde_json::Error> {
        // to do: support payloads once added to API spec
        match status {
            {{#responses}}
            {{#is4xx}}
            {{code}} => Ok(Self::Status{{code}}()),
            {{/is4xx}}
            {{#is5xx}}
            {{code}} => Ok(Self::Status{{code}}()),
            {{/is5xx}}
            {{#isDefault}}
            {{code}} => Ok(Self::DefaultResponse()),
            {{/isDefault}}
            {{/responses}}
            _ => {
                if data.is_empty() {
                    Ok(Self::UnknownValue(serde_json::Value::Null))
                } else {
                    serde_json::from_slice(data).map(Self::UnknownValue)
                }
            }
        }
    }
}

{{/operation}}
{{/operations}}

{{#operations}}
{{#operation}}
{{#description}}
/// {{{.}}}
{{/description}}
{{#notes}}
/// {{{.}}}
{{/notes}}
{{#vendorExtensions.x-consumeMultipleMediaTypes}}
pub fn {{{operationId}}}(configuration: &configuration::Configuration, {{#allParams}} {{#isBodyParam}} body : {{{operationIdCamelCase}}}Body{{/isBodyParam}} 
{{^isBodyParam}} {{{paramName}}}:  {{^required}}Option<{{/required}}{{#required}}{{#isNullable}}Option<{{/isNullable}}{{/required}}{{#isString}}{{#isArray}}Vec<{{/isArray}}{{^isUuid}}&str{{/isUuid}}{{#isArray}}>{{/isArray}}{{/isString}}{{#isUuid}}{{#isArray}}Vec<{{/isArray}}&str{{#isArray}}>{{/isArray}}{{/isUuid}}{{^isString}}{{^isUuid}}{{^isPrimitiveType}}{{/isPrimitiveType}}{{{dataType}}}{{/isUuid}}{{/isString}}{{^required}}>{{/required}}{{#required}}{{#isNullable}}>{{/isNullable}}{{/required}}{{/isBodyParam}}{{^-last}}, {{/-last}}{{/allParams}}
{{/vendorExtensions.x-consumeMultipleMediaTypes}}
{{^vendorExtensions.x-consumeMultipleMediaTypes}}
pub fn {{{operationId}}}(configuration: &configuration::Configuration, {{#allParams}}{{{paramName}}}: 
{{^required}}Option<{{/required}}{{#required}}{{#isNullable}}Option<{{/isNullable}}{{/required}}{{#isString}}{{#isArray}}Vec<{{/isArray}}{{^isUuid}}&str{{/isUuid}}{{#isArray}}>{{/isArray}}{{/isString}}{{#isUuid}}{{#isArray}}Vec<{{/isArray}}&str{{#isArray}}>{{/isArray}}{{/isUuid}}{{^isString}}{{^isUuid}}{{^isPrimitiveType}}{{^isContainer}}{{#isBodyParam}}crate::models::{{/isBodyParam}}{{/isContainer}}{{/isPrimitiveType}}{{{dataType}}}{{/isUuid}}{{/isString}}{{^required}}>{{/required}}{{#required}}{{#isNullable}}>{{/isNullable}}{{/required}}
{{^-last}}, {{/-last}}{{/allParams}}{{/vendorExtensions.x-consumeMultipleMediaTypes}}{{#vendorExtensions.x-produceMultipleMediaTypes}}, accept : {{{operationIdCamelCase}}}Accept{{/vendorExtensions.x-produceMultipleMediaTypes}}) -> Result<ResponseContent< {{#supportMultipleResponses}}{{{operationIdCamelCase}}}Success {{/supportMultipleResponses}} {{^supportMultipleResponses}}{{^returnType}}(){{/returnType}}{{{returnType}}}{{/supportMultipleResponses}}>, Error<{{{operationIdCamelCase}}}Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}{{{path}}}", local_var_configuration.base_path{{#pathParams}}, {{{baseName}}}={{#isString}}crate::apis::urlencode({{/isString}}{{{paramName}}}{{^required}}.unwrap(){{/required}}{{#required}}{{#isNullable}}.unwrap(){{/isNullable}}{{/required}}{{#isArray}}.join(",").as_ref(){{/isArray}}{{#isString}}){{/isString}}{{/pathParams}});
    let mut local_var_req_builder = create_request!(local_var_client, {{httpMethod}}, local_var_uri_str.as_str());
    local_var_req_builder = local_var_req_builder.config().http_status_as_error(false).build();

    {{#queryParams}}
    {{#required}}
    {{#isArray}}
    local_var_req_builder = match "{{collectionFormat}}" {
        "multi" => local_var_req_builder.query_pairs({{{paramName}}}.into_iter().map(|p| ("{{{baseName}}}", p)).collect::<Vec<(&str, &str)>>()),
        _ => local_var_req_builder.query_pairs([("{{{baseName}}}", &{{{paramName}}}.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(","))]),
    };
    {{/isArray}}
    {{^isArray}}
    {{^isNullable}}
    local_var_req_builder = local_var_req_builder.query_pairs([("{{{baseName}}}", {{{paramName}}})]);
    {{/isNullable}}
    {{#isNullable}}
    {{#isDeepObject}}
    if let Some(ref local_var_str) = {{{paramName}}} {
        let params = crate::apis::parse_deep_object("{{{baseName}}}", local_var_str);
        local_var_req_builder = local_var_req_builder.query_pairs(&params);
    };
    {{/isDeepObject}}
    {{^isDeepObject}}
    if let Some(local_var_str) = {{{paramName}}} {
        local_var_req_builder = local_var_req_builder.query_pairs([("{{{baseName}}}", local_var_str.to_string().as_str())]);
    };
    {{/isDeepObject}}
    {{/isNullable}}
    {{/isArray}}
    {{/required}}
    {{^required}}
    if let Some(local_var_str) = {{{paramName}}} {
        {{#isArray}}
        local_var_req_builder = match "{{collectionFormat}}" {
            "multi" => {
                for i in local_var_str.iter() {
                    local_var_req_builder =
                        local_var_req_builder.query("{{{baseName}}}", i.to_string().as_str());
                }
                local_var_req_builder
            } 
            _ => local_var_req_builder.query_pairs([("{{{baseName}}}", local_var_str.iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").as_str())]),
        };
        {{/isArray}}
        {{^isArray}}
        {{#isDeepObject}}
        let params = crate::apis::parse_deep_object("{{{baseName}}}", local_var_str);
        local_var_req_builder = local_var_req_builder.query_pairs(&params);
        {{/isDeepObject}}
        {{^isDeepObject}}
        local_var_req_builder = local_var_req_builder.query_pairs([("{{{baseName}}}", local_var_str.to_string().as_str())]);
        {{/isDeepObject}}
        {{/isArray}}
    }
    {{/required}}
    {{/queryParams}}
    {{#hasAuthMethods}}
    {{#authMethods}}
    {{#isApiKey}}
    {{#isKeyInQuery}}
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.query_pairs(&[("{{{keyParamName}}}", local_var_value)]);
    }
    {{/isKeyInQuery}}
    {{/isApiKey}}
    {{/authMethods}}
    {{/hasAuthMethods}}
    {{#hasAuthMethods}}
    {{/hasAuthMethods}}
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header("user-agent", local_var_user_agent);
    }
    {{#hasHeaderParams}}
    {{#headerParams}}
    {{#required}}
    {{^isNullable}}
    local_var_req_builder = local_var_req_builder.header("{{{baseName}}}", {{{paramName}}}{{#isArray}}.join(","){{/isArray}});
    {{/isNullable}}
    {{#isNullable}}
    match {{{paramName}}} {
        Some(local_var_param_value) => { local_var_req_builder = local_var_req_builder.header("{{{baseName}}}", local_var_param_value{{#isArray}}.join(","){{/isArray}}); },
        None => { local_var_req_builder = local_var_req_builder.header("{{{baseName}}}", ""); },
    }
    {{/isNullable}}
    {{/required}}
    {{^required}}
    if let Some(local_var_param_value) = {{{paramName}}} {
        local_var_req_builder = local_var_req_builder.header("{{{baseName}}}", local_var_param_value{{#isArray}}.join(","){{/isArray}}.to_string().as_str());
    }
    {{/required}}
    {{/headerParams}}
    {{/hasHeaderParams}}
    {{#hasAuthMethods}}
    {{#authMethods}}
    {{#isApiKey}}
    {{#isKeyInHeader}}
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("{{{keyParamName}}}", &local_var_value);
    };
    {{/isKeyInHeader}}
    {{/isApiKey}}
    {{#isBasic}}
    {{#isBasicBasic}}
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        let value = super::basic_auth(local_var_auth_conf);

        local_var_req_builder = local_var_req_builder.header("authorization", &value);
    };
    {{/isBasicBasic}}
    {{#isBasicBearer}}
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.header("authorization",format!("Bearer {}",local_var_token));
    };
    {{/isBasicBearer}}
    {{/isBasic}}
    {{#isOAuth}}
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.header("authorization",format!("Bearer {}",local_var_token));
    };
    {{/isOAuth}}
    {{/authMethods}}
    {{/hasAuthMethods}}
    {{#hasProduces}}
    {{#vendorExtensions.x-produceMultipleMediaTypes}}
    let accept_str = accept.as_str();
    let is_json = accept.is_json();
    {{/vendorExtensions.x-produceMultipleMediaTypes}}
    {{^vendorExtensions.x-produceMultipleMediaTypes}}
    {{#produces}}
    let accept_str = "{{{mediaType}}}";
    {{/produces}}
    {{/vendorExtensions.x-produceMultipleMediaTypes}}
    local_var_req_builder = local_var_req_builder.header("accept", accept_str);
    {{/hasProduces}}

    {{#isMultipart}}
    let mut local_var_multipart = ::multipart::client::lazy::Multipart::new();

    {{#hasFormParams}}
    {{#formParams}}
    {{#isFile}}
    if let Some({{{paramName}}}) = {{{paramName}}} {
        local_var_multipart.add_stream(
            "{{{baseName}}}",
            ::std::io::Cursor::new({{{paramName}}}),
            None::<&str>,
            None,
        );
    }
    {{/isFile}}
    {{/formParams}}
    {{#formParams}}
    {{^isFile}}
    if let Some({{{paramName}}}) = {{{paramName}}} {
        let {{{paramName}}} = ::serde_json::to_vec(&{{{paramName}}})?;
        local_var_multipart.add_stream(
            "{{{baseName}}}",
            ::std::io::Cursor::new({{{paramName}}}),
            None::<&str>,
            None,
        );
    }
    {{/isFile}}
    {{/formParams}}
    {{/hasFormParams}}

    let mut local_var_multipart = local_var_multipart.prepare()?;
    local_var_req_builder = local_var_req_builder.header(
        "content-type",
        &format!("multipart/form-data; boundary={}", local_var_multipart.boundary()),
    );
    let local_var_result = local_var_req_builder.send(ureq::SendBody::from_reader(&mut local_var_multipart));
    {{/isMultipart}}
    {{^isMultipart}}
    {{#vendorExtensions.x-consumeMultipleMediaTypes}}
    {{#hasBodyParam}}{{#bodyParams}}
    let body_json = body.is_json();
    local_var_req_builder = local_var_req_builder.header("content-type", body.content_type());
    {{/bodyParams}}{{/hasBodyParam}} 
    let local_var_result = if body_json {
        local_var_req_builder.send_json(body)
    } else {
        local_var_req_builder.send(body.get_string().as_str())
    };
    {{/vendorExtensions.x-consumeMultipleMediaTypes}}
    {{^vendorExtensions.x-consumeMultipleMediaTypes}}
    {{#consumes}}
    local_var_req_builder = local_var_req_builder.header("content-type", "{{{mediaType}}}");
    {{#mediaIsJson}}
    let local_var_result = local_var_req_builder.send_json(
    {{/mediaIsJson}}
    {{^mediaIsJson}}
    {{#hasBodyParam}}
    {{#bodyParams}}
    {{#isFile}}
    let local_var_result = local_var_req_builder.send(
    {{/isFile}}
    {{^isFile}}
    let local_var_result = local_var_req_builder.send(
    {{/isFile}}
    {{/bodyParams}}
    {{/hasBodyParam}}
    {{/mediaIsJson}}
    {{/consumes}}
    {{#hasBodyParam}}
    {{#bodyParams}}
    {{{paramName}}}
    {{/bodyParams}}
    {{/hasBodyParam}}
    {{#consumes}}
    {{/consumes}}
    {{#hasBodyParam}});{{/hasBodyParam}}
    {{/vendorExtensions.x-consumeMultipleMediaTypes}}
    {{^hasBodyParam}}
    let local_var_result = local_var_req_builder.send_empty();
    {{/hasBodyParam}}
    {{/isMultipart}}

    let local_var_resp = local_var_result?;

    let local_var_status = local_var_resp.status().as_u16();
    if local_var_status < 400 {
        {{#returnType}}
        {{#vendorExtensions.x-produceMultipleMediaTypes}}
        if is_json {
            ResponseContent::deserialized(local_var_resp)
        } else {
            ResponseContent::string(local_var_resp)
        }
        {{/vendorExtensions.x-produceMultipleMediaTypes}}
        {{^vendorExtensions.x-produceMultipleMediaTypes}}
        {{#produces}}
        {{#mediaIsJson}}
        ResponseContent::deserialized(local_var_resp)
        {{/mediaIsJson}}
        {{^mediaIsJson}}
        {{#isResponseFile}}
        ResponseContent::bytes(local_var_resp)
        {{/isResponseFile}}
        {{^isResponseFile}}
        ResponseContent::string(local_var_resp)
        {{/isResponseFile}}
        {{/mediaIsJson}}
        {{/produces}}
        {{/vendorExtensions.x-produceMultipleMediaTypes}}
        {{/returnType}}
        {{^returnType}}
        ResponseContent::unit(local_var_resp)
        {{/returnType}}
    } else {
        ResponseContent::new(local_var_resp, |data| {{{operationIdCamelCase}}}Error::new(local_var_status, data).map_err(From::from))
            .and_then(|content| Err(Error::ResponseError(content)))
    }
}

{{/operation}}
{{/operations}}
